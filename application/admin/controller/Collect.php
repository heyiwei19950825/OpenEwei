<?php

namespace app\admin\controller;

use org\Helper;
use QL\QueryList;
use think\Controller;
use think\Db;
use think\Exception;

class Collect extends Controller
{
    public $config;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->config = model('admin/Config');
    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        return $this->fetch();
    }

    /**
     * 抓取规则
     */
    public function rule(){
        if($this->request->isPost()){
            ini_set('max_execution_time', '0');
            //初始化数据
            $params = $this->request->param();
            $url = $dow_img = $code = $need_login = $login_url = $login_name = $login_password = $rule = $table_name = $get_model = $page = $start_page = $make = '';
            $list_name = $list_rule = $list_type = $list_desc = $table_collect_name = $table_field_name =  $second_filtration = $second = $row = $list_filtration = $urlArrKey = $range = [];
            extract($params);

            $domain = 'http://'.explode('/',$params['url'])[2];//获取域名
            $key[]  = ['type'  => 'checkbox','fixed' => 'left',];
            $i      = 1;//默认页面数

            //判断抓取模式
            if( $get_model ===  "0" ){      //普通模式
                $rule = [];
                //需要做数据转换
                foreach ($list_name as $k => $v){
                    foreach( $v as $sK => $sV){
                        if( empty( $sV ) || empty( $list_rule[$k][$sK] )  || empty( $list_type[$k][$sK] ) || empty( $list_desc[$k][$sK] ) ){
                            $this->error('列表规则参数不能为空');
                        }
                        $rule[$k][$sV] = [$list_rule[$k][$sK],$list_type[$k][$sK],$list_desc[$k][$sK]];
                    }
                }
            }else{
                //数据验证
                try{
                    $rule = json_decode($params['rule'],true);
                    $list_filtration = [];
                }catch (Exception $e){
                    $this->error('规则格式错误');
                }
            }

            if(empty($rule)) $this->error('列表规则参数不能为空或错误');

            //初始化话规则
            foreach ($rule[0] as $k => &$v){
                $key[] = [
                    'field' => $k,
                    'title' => $v[2]
                ];
                unset($v[2]);
            }

            //固定json返回key
            $key[] =["fixed"=> 'right', "width"=> 165, "align"=> 'center', "toolbar"=> '#barDemo'];
            //查询1级
            while ( $i <= $page[0] ){
                // 待采集的页面地址
                $url = str_replace('@@',$i,$url);
                $headers = get_headers( $url );

                if (strpos($headers[0], '404'))
                {
                    continue;
                }
                // 切片选择器
                try{
                    $list_filtration0 = $list_filtration[0];
                    echo json_encode($rule[0]);
                    echo $range[0];die;
                    $data = QueryList::get($url)->rules($rule[0])->range($range[0])->query()->getData()->all();
                    foreach ($data as $dataK=>&$dataV){
                        $fi = 0;
                        $notNullVal = false;
                        foreach ($dataV as $fk => &$fv){
                            //验证数组中的值是否都为空
                            if(!empty($fv)){
                                $notNullVal = true;
                            }

                            //正则过滤
                            if( !empty($fv) &&  isset($list_filtration0[$fi]) &&  !empty($list_filtration0[$fi]) ){
                                //拆分正则选取key标示
                                if( strpos($list_filtration0[$fi],'@@@') ){
                                    $dFiltration = explode('@@@',$list_filtration0[$fi]);
                                    $fKey = $dFiltration[1];
                                    $pregRule = $dFiltration[0];

                                }else{
                                    $pregRule = $list_filtration0[$fi];
                                    $fKey = 1;
                                }
                                preg_match( $pregRule,$fv,$match);
                                if(!empty($match)){
                                    $fv = $match[$fKey];
                                }else{
                                    $fv = '暂无数据';
                                }
                            }
                            $fi++;
                        }
                        //数组值都为空则删除当前数组
                        if(!$notNullVal){
                            unset($data[$dataK]);
                        }
                    }
                }catch (Exception $e){
                    echo $e->getMessage();die;
                    return $this->error('采集规则错误，请检查');
                }
                $row = array_merge($row, $data);
                $i++;
            }

            return $this->success( '共查获'.count($row).'条数据，准备抓取详细信息','', ['key'=>$key,'data'=>$row]);
        }

        return $this->fetch();
    }

































    /**
     * 保存抓取规则
     */
    public function saveRule(){

    }

    /**
     * 保存数据
     */
    public function saveData(){

        if( $this->request->isPost() ){
            $params  = $this->request->param();
            $params['data']    = json_decode($params['data'],true);
            parse_str($params['config'],$config);

            //独立数据转换
            if($params['alone'] == true){
                $data = $params['data'];
            }else{
                $data = $params['data'];
            }


            if(empty($data) ){
                return $this->error('暂无数据');
            }

            //检测表是否存在
            $checkRow = Db::query('show tables like "oc_'.$config['tableName'].'"');

            //表不存在并且不创建新表 提示错误
            if( empty($checkRow) ){

                return $this->error('数据表不存在');
            }
            try{
                //创建表
                if( $config['field'] != 0 ){
                    $field = array_keys($data[0]);
                    $tableField = Db::query('desc oc_'.$config['tableName']);
                    $tableFields = [];
                    foreach($tableField as $k=>$v){
                        $tableFields[] = $v['Field'];
                    }
                    $sql = '';
                    //检测字段是否已经存在表中   如果没有则生成sql语句              //生成sql语句
                    foreach ($field as $k=>$v){
                        if(!in_array($v,$tableFields)){
                            $len = ''; // 字段类型
                            $demo  = $data[0][$v];

                            $coutLen = strlen( $demo );

                            switch ($coutLen){
                                case $coutLen < 50:
                                    $len ='varchar(50)';
                                    break;

                                case $coutLen < 255:
                                    $len ='varchar(255)';
                                    break;

                                case $coutLen > 255:
                                    $len ='text';
                                    break;
                                default:
                                    $len ='text';
                                    break;
                            }
                            $sql .= ' ADD COLUMN `'.$v.'` '.$len.' DEFAULT NULL COMMENT \'测试\', ';
                        }

                    }
                    //执行sql语句
                    $sql = 'ALTER TABLE `oc_'.$config['tableName'].'`'.rtrim($sql,', ').';';
                    Db::query($sql);
                }
                //院校库===============================
                $names = Db::name($config['tableName'])->field('name')->select();

                foreach ($names as $aa=>$bb){
                    $names[$aa] = $bb['name'];
                }
                foreach ($data as $a => $b){
                    if(in_array($b['name'],$names)){
                            unset($data[$a]);
                    }
                }
                //院校库===============================
                $insertRow = true;
                //数据写入表中
                foreach ($data as $k=>$v){
                    $rows= Db::name($config['tableName'])->insert($v);
                    if(!$rows) $insertRow = false;
                }
                if($insertRow){
                    return $this->success('写入成功');
                }

            }catch (Exception $e){
                echo $e->getMessage();die;
                return $this->error('错误数据，请检查2');

            }
        }
    }

    /**
     * 采集入库配置
     * @return mixed
     */
    public function importConfig(){
        return $this->fetch();
    }



}
