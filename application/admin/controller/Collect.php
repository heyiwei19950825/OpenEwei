<?php

namespace app\admin\controller;

use org\Helper;
use QL\QueryList;
use think\Controller;
use think\Db;
use think\Exception;
use think\Request;

class Collect extends Controller
{
    public $config;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->config = model('admin/Config');
    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        return $this->fetch();
    }

    /**
     * 抓取规则
     */
    public function rule(){

        if($this->request->isPost()){
            //初始化数据
            $params = $this->request->param();
            $url = $range = $dow_img = $code = $need_login = $login_url = $login_name = $login_password = $need_detail = $rule = $table_name = $get_model = $page = $detail_code = '';
            $list_name = $list_rule = $list_type = $list_desc = $detail_name = $detail_rule = $detail_type = $detail_desc = $table_collect_name = $table_field_name =  $second = $row = $list_filtration = [];
            extract($params);

            $domain = 'http://'.explode('/',$params['url'])[2];//获取域名
            $key[]  = ['type'  => 'checkbox','fixed' => 'left',];
            $i      = 0;//默认页面数

            //是否需要模拟登陆
            if($need_login){

            }

            //判断抓取模式
            if( $get_model ===  "0" ){      //普通模式
                $rule = [];
                //需要做数据转换
                foreach ($list_name as $k => $v){

                    if( empty( $v ) || empty( $list_rule[$k] )  || empty( $list_type[$k] ) || empty( $list_desc[$k] ) ){
                        $this->error('列表规则参数不能为空');
                    }

                    $rule[$v] = [$list_rule[$k],$list_type[$k],$list_desc[$k]];
                }


                //设置详情规则
                if( $need_detail == 1 ){
                    foreach ($detail_name as $k => $v){

                        if( empty( $v ) || empty( $detail_rule[$k] )  || empty( $detail_type[$k] ) || empty( $detail_desc[$k] ) ){
                            $this->error('列表规则参数不能为空');
                        }
                        $rule[$detail_code][] = [$v =>[$detail_rule[$k],$detail_type[$k],$detail_desc[$k]]];
                    }
                }

            }else{
                //数据验证
                try{
                    $rule = json_decode($params['rule'],true);
                }catch (Exception $e){
                    $this->error('规则格式错误');
                }
            }

            if(empty($rule)) $this->error('列表规则参数不能为空或错误');

            //初始化话规则
            foreach ($rule as $k => &$v){
                //验证规则格式
                if( count($v) < 3 ){
                    return $this->error('规则格式错误');
                }
                $key[] = [
                    'field'  => $k,
                    'title' => $v[2]
                ];
                unset($v[2]);

                //分解二级采集规则
                if( isset($v[3]) ){
                    $second[$k] = $v[3];
                    foreach ($v[3] as $vk => $vv){
                        $key[] = [
                            'field'  => $vk,
                            'title'  => $vv[2]
                        ];
                    }
                    unset($v[3]);
                }
            }
            $key[] =["fixed"=> 'right', "width"=> 165, "align"=> 'center', "toolbar"=> '#barDemo'];
            //查询1级
            while ( $i <= $page ){
                // 待采集的页面地址
                $url = $i == 0 ? $params['url']:$params['url'].$i.'/';
                // 切片选择器
                $range = $params['range'];
                $data = QueryList::Query($url,$rule,$range)->data;
                try{
                    //正则过滤
                    foreach ($data as $dataK=>&$dataV){
                        $fi = 0;
                        foreach ($dataV as $fk => &$fv){
                            if( !empty($fv) &&  $list_filtration[$fi]){
                                preg_match("/$list_filtration[$fi]/",$fv,$match);
                                if(!empty($match)){
                                    $fv = $match[0];
                                }
                            }
                            $fi++;
                        }

                    }
                }catch (Exception $e){
                    echo $e->getMessage();die;
                }



                $row = array_merge($row,$data);
                $i++;
            }

            //查询2级
            if( !empty($second) ){
                //分解1级查询数据
                foreach ( $row as $rowKey => &$val) {
                        //分解条数据查询规则
                        foreach ( $second as $secondKey => $secondVal){
                            $secondUrl = $val[$secondKey];
                            $secondUrl = filter_var($secondUrl,FILTER_VALIDATE_URL)?$secondUrl:$domain.$secondUrl;
                            if(filter_var($secondUrl,FILTER_VALIDATE_URL)){
                                $secondData = QueryList::Query($secondUrl,$secondVal)->data;
                                if( $secondData ){
                                    $val = array_merge($val,$secondData[0]);
                                }
                            }
                        }
                }
            }

            return $this->success('查询成功','', ['key'=>$key,'data'=>$row]);
        }

        return $this->fetch();
    }

    /**
     * 保存抓取规则
     */
    public function saveRule(){

    }

    /**
     * 保存数据
     */
    public function saveData(){

        if( $this->request->isPost() ){
            $params  = $this->request->param();
            unset($params['data']);
            var_dump($params);die;

            $config  = Helper::convertUrlArray($params['config']);
            if(empty($params['data']) ){
                return $this->error('暂无数据');
            }

            //检测表是否存在
            $checkRow = Db::query('show tables like "oc_'.$config['tableName'].'"');

            //表不存在并且不创建新表 提示错误
            if( empty($checkRow) ){

                return $this->error('数据表不存在');
            }
            try{
                //创建表
                if( $config['field'] != 0 ){
                    //分析字段
                    $field = array_keys($params['data'][0]);
                    $tableField = Db::query('desc oc_'.$config['tableName']);
                    $tableFields = [];
                    foreach($tableField as $k=>$v){
                        $tableFields[] = $v['Field'];
                    }
                    $sql = '';
                    //检测字段是否已经存在表中   如果没有则生成sql语句              //生成sql语句
                    foreach ($field as $k=>$v){
                        if(!in_array($v,$tableFields)){
                            $len = ''; // 字段类型
                            $demo  = $params['data'][0][$v];
                            if( strlen( $demo ) < 50 ){
                                $len = 'varchar(50)';
                            }
                            switch (strlen( $demo )){
                                case $demo < 50:
                                    $len ='varchar(50)';
                                    break;

                                case $demo < 255:
                                    $len ='varchar(255)';
                                    break;

                                case $demo > 255:
                                    $len ='text';
                                    break;
                            }

                            $sql .= ' ADD COLUMN `'.$v.'` '.$len.' DEFAULT NULL, ';
                        }

                    }
                    //执行sql语句
                    $sql = 'ALTER TABLE ` oc_'.$config['tableName'].'`'.rtrim($sql,', ').';';
                    $tableRow = Db::query($sql);
                    if( !$tableRow ){
                        return $this->error('错误数据，请检查1');
                    }
                }
                //数据写入表中
                $insertRow = Db::name($config['tableName'])->insertAll($params['data']);

                if($insertRow){
                    return $this->success('写入成功');
                }

            }catch (Exception $e){
                echo $e->getMessage();die;
                return $this->error('错误数据，请检查2');

            }
        }
    }

    /**
     * 采集入库配置
     * @return mixed
     */
    public function importConfig(){
        return $this->fetch();
    }

}
